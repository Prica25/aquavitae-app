"""fix personal data & activity level columns

Revision ID: 3ca391ce2773
Revises: bf8a87127147
Create Date: 2022-07-06 09:50:55.121117

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "3ca391ce2773"
down_revision = "bf8a87127147"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "personal_data",
        "birthday",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.Date(),
        existing_nullable=False,
    )
    op.alter_column(
        "personal_data", "occupation", existing_type=sa.VARCHAR(length=255), nullable=True
    )
    op.alter_column(
        "personal_data", "food_history", existing_type=sa.VARCHAR(length=1000), nullable=True
    )
    op.alter_column(
        "personal_data", "activity_level_id", existing_type=postgresql.UUID(), nullable=True
    )
    op.drop_constraint("personal_data_activity_level_id_fkey", "personal_data", type_="foreignkey")
    op.create_foreign_key(None, "personal_data", "activity_level", ["activity_level_id"], ["id"])
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, "personal_data", type_="foreignkey")
    op.create_foreign_key(
        "personal_data_activity_level_id_fkey",
        "personal_data",
        "activity_level",
        ["activity_level_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.alter_column(
        "personal_data", "activity_level_id", existing_type=postgresql.UUID(), nullable=False
    )
    op.alter_column(
        "personal_data", "food_history", existing_type=sa.VARCHAR(length=1000), nullable=False
    )
    op.alter_column(
        "personal_data", "occupation", existing_type=sa.VARCHAR(length=255), nullable=False
    )
    op.alter_column(
        "personal_data",
        "birthday",
        existing_type=sa.Date(),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=False,
    )
    # ### end Alembic commands ###
